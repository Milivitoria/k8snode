apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8snode-deployment
  namespace: k8snode-hml
  labels:
    app: k8snode
    environment: hml
spec:
  replicas: 2
  selector:
    matchLabels:
      app: k8snode
      environment: hml
  template:
    metadata:
      labels:
        app: k8snode
        environment: hml
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: k8snode
        image: YOUR_ECR_REGISTRY/k8snode:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: k8snode-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: k8snode-config
              key: PORT
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: k8snode-config
              key: CORS_ORIGINS
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: k8snode-secret
              key: JWT_SECRET
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      imagePullSecrets:
      - name: regcred