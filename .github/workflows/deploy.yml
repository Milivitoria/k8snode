name: Deploy to AWS EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'hml'
        type: choice
        options:
        - hml
        - prd

env:
  ECR_REGISTRY: YOUR_ECR_REGISTRY
  ECR_REPOSITORY: k8snode
  EKS_CLUSTER_NAME: your-eks-cluster
  AWS_REGION: us-east-1

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build TypeScript
      run: npm run build

  build-and-push:
    needs: test-and-lint
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      run: |
        # Build image with multiple tags
        IMAGE_TAG=${GITHUB_SHA::8}
        FULL_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        LATEST_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        docker build -t $FULL_IMAGE_URI -t $LATEST_IMAGE_URI .
        docker push $FULL_IMAGE_URI
        docker push $LATEST_IMAGE_URI
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "full-image-uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-hml:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'hml')
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: hml
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update deployment image
      run: |
        # Update image in deployment
        sed -i "s|YOUR_ECR_REGISTRY|$ECR_REGISTRY|g" k8s/hml/deployment.yaml
        sed -i "s|:latest|:${{ needs.build-and-push.outputs.image-tag }}|g" k8s/hml/deployment.yaml

    - name: Deploy to HML
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespaces.yaml
        
        # Apply HML manifests
        kubectl apply -f k8s/hml/
        
        # Wait for deployment rollout
        kubectl rollout status deployment/k8snode-deployment -n k8snode-hml --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n k8snode-hml
        kubectl get services -n k8snode-hml

    - name: Run health check
      run: |
        # Get service external IP (wait up to 5 minutes)
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service k8snode-service -n k8snode-hml -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "Service available at: http://$EXTERNAL_IP"
            # Test health endpoint
            sleep 30  # Wait for service to be ready
            curl -f "http://$EXTERNAL_IP/health" || true
            break
          fi
          echo "Waiting for external IP... ($i/30)"
          sleep 10
        done

  deploy-prd:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prd'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prd
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update deployment image
      run: |
        # Update image in deployment
        sed -i "s|YOUR_ECR_REGISTRY|$ECR_REGISTRY|g" k8s/prd/deployment.yaml
        sed -i "s|:latest|:${{ needs.build-and-push.outputs.image-tag }}|g" k8s/prd/deployment.yaml

    - name: Deploy to PRD
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespaces.yaml
        
        # Apply PRD manifests
        kubectl apply -f k8s/prd/
        
        # Wait for deployment rollout
        kubectl rollout status deployment/k8snode-deployment -n k8snode-prd --timeout=600s

    - name: Verify deployment
      run: |
        kubectl get pods -n k8snode-prd
        kubectl get services -n k8snode-prd

    - name: Run health check
      run: |
        # Get service external IP (wait up to 5 minutes)
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service k8snode-service -n k8snode-prd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "Service available at: http://$EXTERNAL_IP"
            # Test health endpoint
            sleep 30  # Wait for service to be ready
            curl -f "http://$EXTERNAL_IP/health" || true
            break
          fi
          echo "Waiting for external IP... ($i/30)"
          sleep 10
        done

  notify:
    if: always()
    needs: [test-and-lint, build-and-push, deploy-hml, deploy-prd]
    runs-on: ubuntu-latest
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-hml.result }}" == "success" ]]; then
          echo "✅ HML deployment successful"
        elif [[ "${{ needs.deploy-hml.result }}" == "failure" ]]; then
          echo "❌ HML deployment failed"
        fi
        
        if [[ "${{ needs.deploy-prd.result }}" == "success" ]]; then
          echo "✅ PRD deployment successful"
        elif [[ "${{ needs.deploy-prd.result }}" == "failure" ]]; then
          echo "❌ PRD deployment failed"
        fi