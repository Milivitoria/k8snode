name: Deploy to AWS EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prd'
        type: choice
        options:
        - hml
        - prd

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: k8snode-api
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build TypeScript
      run: npm run build

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Generate image tag
      id: tag
      run: |
        IMAGE_TAG="${GITHUB_SHA:0:8}-$(date +%s)"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag.outputs.image-tag }}
      run: |
        # Build image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-hml:
    name: Deploy to HML
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: hml
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update image in deployment
      run: |
        sed -i 's|YOUR_ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g' k8s/hml/deployment.yaml
        sed -i 's|:latest|:${{ needs.build-and-push.outputs.image-tag }}|g' k8s/hml/deployment.yaml

    - name: Deploy to HML with Gateway API
      run: |
        # Make deployment script executable
        chmod +x deploy-gateway.sh
        
        # Deploy HML environment using Gateway API
        ./deploy-gateway.sh hml

    - name: Verify Gateway API deployment
      run: |
        echo "Verifying Gateway API deployment..."
        
        # Check Gateway status
        kubectl get gateway k8snode-gateway -n k8snode-hml -o wide
        
        # Check HTTPRoute status
        kubectl get httproute -n k8snode-hml -o wide
        
        # Check pods
        kubectl get pods -n k8snode-hml -l app=k8snode-api
        
        # Wait for Gateway to be ready
        echo "Waiting for Gateway to be ready..."
        kubectl wait --for=condition=Programmed gateway/k8snode-gateway -n k8snode-hml --timeout=300s

    - name: Run Gateway health check
      run: |
        # Get Gateway IP
        GATEWAY_IP=$(kubectl get gateway k8snode-gateway -n k8snode-hml -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "")
        
        if [ -n "$GATEWAY_IP" ]; then
          echo "Gateway IP: $GATEWAY_IP"
          
          # Health check through Gateway (using IP with Host header)
          echo "Testing Gateway health check..."
          for i in {1..10}; do
            if curl -f -H "Host: hml.yourdomain.com" http://$GATEWAY_IP/health; then
              echo "Gateway health check passed!"
              break
            else
              echo "Gateway health check failed, retrying in 15 seconds..."
              sleep 15
            fi
          done
        else
          echo "Gateway IP not available yet, using service for health check..."
          kubectl port-forward svc/k8snode-api-service 8080:80 -n k8snode-hml &
          sleep 10
          curl -f http://localhost:8080/health || echo "Service health check failed"
          pkill -f "kubectl port-forward" || true
        fi

  deploy-prd:
    name: Deploy to PRD
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prd'
    environment: prd
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update image in deployment
      run: |
        sed -i 's|YOUR_ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g' k8s/prd/deployment.yaml
        sed -i 's|:latest|:${{ needs.build-and-push.outputs.image-tag }}|g' k8s/prd/deployment.yaml

    - name: Deploy to PRD with Gateway API
      run: |
        # Make deployment script executable
        chmod +x deploy-gateway.sh
        
        # Deploy PRD environment using Gateway API
        ./deploy-gateway.sh prd

    - name: Verify Gateway API deployment
      run: |
        echo "Verifying Gateway API deployment..."
        
        # Check Gateway status
        kubectl get gateway k8snode-gateway -n k8snode-prd -o wide
        
        # Check HTTPRoute status
        kubectl get httproute -n k8snode-prd -o wide
        
        # Check pods
        kubectl get pods -n k8snode-prd -l app=k8snode-api
        
        # Wait for Gateway to be ready
        echo "Waiting for Gateway to be ready..."
        kubectl wait --for=condition=Programmed gateway/k8snode-gateway -n k8snode-prd --timeout=600s

    - name: Run Gateway health check
      run: |
        # Get Gateway IP
        GATEWAY_IP=$(kubectl get gateway k8snode-gateway -n k8snode-prd -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "")
        
        if [ -n "$GATEWAY_IP" ]; then
          echo "Gateway IP: $GATEWAY_IP"
          
          # Health check through Gateway (using IP with Host header)
          echo "Testing Gateway health check..."
          for i in {1..15}; do
            if curl -f -H "Host: yourdomain.com" http://$GATEWAY_IP/health; then
              echo "Gateway health check passed!"
              break
            else
              echo "Gateway health check failed, retrying in 20 seconds..."
              sleep 20
            fi
          done
        else
          echo "Gateway IP not available yet, using service for health check..."
          kubectl port-forward svc/k8snode-api-service 8080:80 -n k8snode-prd &
          sleep 15
          curl -f http://localhost:8080/health || echo "Service health check failed"
          pkill -f "kubectl port-forward" || true
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-hml, deploy-prd]
    if: always()
    steps:
    - name: Deployment Success
      if: needs.deploy-hml.result == 'success' || needs.deploy-prd.result == 'success'
      run: |
        echo "üöÄ Gateway API deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || 'hml' }}"
        echo "Image: ${{ needs.build-and-push.outputs.image }}"
        echo ""
        echo "üåê Access URLs:"
        if [ "${{ github.event.inputs.environment || 'hml' }}" == "hml" ]; then
          echo "  - https://hml.yourdomain.com/health"
          echo "  - https://api-hml.yourdomain.com/auth"
        elif [ "${{ github.event.inputs.environment }}" == "prd" ]; then
          echo "  - https://yourdomain.com/health"
          echo "  - https://api.yourdomain.com/auth"
        fi
        echo ""
        echo "üìã Next steps:"
        echo "  1. Configure DNS to point to Gateway IP"
        echo "  2. Verify SSL certificates are issued"
        echo "  3. Test all endpoints"

    - name: Deployment Failure
      if: needs.deploy-hml.result == 'failure' || needs.deploy-prd.result == 'failure'
      run: |
        echo "‚ùå Gateway API deployment failed!"
        echo "Please check the logs and Gateway status:"
        echo "  kubectl get gateway -A"
        echo "  kubectl get httproute -A"
        echo "  kubectl describe gateway k8snode-gateway -n k8snode-${{ github.event.inputs.environment || 'hml' }}"
        exit 1