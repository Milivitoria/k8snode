name: Deploy to AWS EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'hml'
        type: choice
        options:
        - hml
        - prd

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: k8snode-api
  EKS_CLUSTER_NAME: your-eks-cluster-name

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build TypeScript
      run: npm run build

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-hml:
    name: Deploy to HML
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: hml
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update deployment image
      run: |
        # Update the image in deployment
        sed -i "s|YOUR_ECR_REGISTRY|${{ needs.build.outputs.image }}|g" k8s/hml/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespaces.yaml
        kubectl apply -f k8s/hml/
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/k8snode-api -n k8snode-hml --timeout=300s

    - name: Get service URL
      run: |
        kubectl get service k8snode-api-service -n k8snode-hml

  deploy-prd:
    name: Deploy to PRD
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prd'
    environment: prd
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Update deployment image
      run: |
        # Update the image in deployment
        sed -i "s|YOUR_ECR_REGISTRY|${{ needs.build.outputs.image }}|g" k8s/prd/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespaces.yaml
        kubectl apply -f k8s/prd/
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/k8snode-api -n k8snode-prd --timeout=300s

    - name: Get service URL
      run: |
        kubectl get service k8snode-api-service -n k8snode-prd

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-hml, deploy-prd]
    if: failure()
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Rollback deployment
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          kubectl rollout undo deployment/k8snode-api -n k8snode-hml
        fi
        if [ "${{ github.event.inputs.environment }}" == "prd" ]; then
          kubectl rollout undo deployment/k8snode-api -n k8snode-prd
        fi